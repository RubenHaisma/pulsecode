generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String?
  image         String?
  githubId      String?       @unique
  githubUsername String?
  twitterId     String?       @unique
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  achievements  Achievement[]
  stats         Stats?
  points        Int           @default(0)
  accounts      Account[]
  sessions      Session[]
  repositories  GitHubRepository[]
  activities    GitHubActivity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Stats {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commits       Int       @default(0)
  pullRequests  Int       @default(0)
  streak        Int       @default(0)
  lastActivity  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  totalLinesChanged Int   @default(0)
  contributions Int       @default(0)
  reviews       Int       @default(0)
  privateRepos  Int       @default(0)
  publicRepos   Int       @default(0)
  currentStreak Int       @default(0)
  longestStreak Int       @default(0)
  activeDays    Int       @default(0)
  totalRepositoriesImpacted Int @default(0)
  stars         Int       @default(0)
  lastRefreshed DateTime  @default(now())
}

model Achievement {
  id          String    @id @default(uuid())
  name        String
  description String
  icon        String
  points      Int
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  unlockedAt  DateTime  @default(now())
}

// Repository data for each user
model GitHubRepository {
  id          String   @id @default(uuid())
  userId      String
  repoId      Int      // GitHub's repository ID
  name        String
  fullName    String
  owner       String
  isPrivate   Boolean  @default(false)
  ownerType   String   // User or Organization
  url         String
  stars       Int      @default(0)
  commitCount Int      @default(0)
  prCount     Int      @default(0)
  reviewCount Int      @default(0)
  linesChanged Int     @default(0)
  lastUpdated DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, repoId])
}

// Store activity data
model GitHubActivity {
  id          String   @id @default(uuid())
  userId      String
  type        String   // commit, pr, review
  title       String
  repo        String
  url         String
  date        DateTime
  sha         String?  // For commits
  prNumber    Int?     // For PRs or reviews
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date])
}